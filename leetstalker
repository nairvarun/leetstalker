#! /bin/python3

# TODO:
    # multithread
    # format output

import requests
import json
from pprint import pprint


def main():
    colors = {
        'CEND': '\33[0m',
        'CBOLD': '\33[1m',
        'CITALIC': '\33[3m',
        'CURL': '\33[4m',
        'CBLINK': '\33[5m',
        'CBLINK2': '\33[6m',
        'CSELECTED':'\33[7m',

        'CBLACK': '\33[30m',
        'CRED': '\33[31m',
        'CGREEN': '\33[32m',
        'CYELLOW':'\33[33m',
        'CBLUE': '\33[34m',
        'CVIOLET':'\33[35m',
        'CBEIGE': '\33[36m',
        'CWHITE': '\33[37m',

        'CBLACKBG': '\33[40m',
        'CREDBG': '\33[41m',
        'CGREENBG': '\33[42m',
        'CYELLOWBG':'\33[43m',
        'CBLUEBG': '\33[44m',
        'CVIOLETBG':'\33[45m',
        'CBEIGEBG': '\33[46m',
        'CWHITEBG': '\33[47m',

        'CGREY': '\33[90m',
        'CRED2': '\33[91m',
        'CGREEN2': '\33[92m',
        'CYELLOW2':'\33[93m',
        'CBLUE2': '\33[94m',
        'CVIOLET2':'\33[95m',
        'CBEIGE2': '\33[96m',
        'CWHITE2': '\33[97m',

        'CGREYBG': '\33[100m',
        'CREDBG2': '\33[101m',
        'CGREENBG2': '\33[102m',
        'CYELLOWBG2':'\33[103m',
        'CBLUEBG2': '\33[104m',
        'CVIOLETBG2':'\33[105m',
        'CBEIGEBG2': '\33[106m',
        'CWHITEBG2': '\33[107m',
    }

    # print(colors['CBEIGE'] + colors['CBOLD'] + 'aaaaaa' + colors['CEND'])
    # return


    url = 'https://leetcode.com/graphql/'

    headers = {
        'Content-Type': 'application/json',
    }

    unames = [
        'nairvarun',
        'gultandon',
        'user5491H',
        'samsepi0x0',
        'suryanssshhh',
        'tkj2410',
        'chadasaisaketh',
	'shoryashokanda',
	'iamarpit602'
    ]

    for uname in unames:
        res = query(url, headers, uname)
        # todo: better way to do this
        print(f'{colors["CBOLD"]}{res["uname"]}{colors["CEND"]} ({colors["CITALIC"]}{res["rank"]}{colors["CEND"]}) [{res["solved"]["total"]}: {colors["CGREEN"]}{res["solved"]["easy"]}{colors["CEND"]} + {colors["CYELLOW"]}{res["solved"]["medium"]}{colors["CEND"]} + {colors["CRED"]}{res["solved"]["hard"]}{colors["CEND"]}]')

def query(url, headers, uname):
    ranking_data = {
        'query': '''
            query userPublicProfile($username: String!) {
                matchedUser(username: $username) {
                    profile {
                        ranking
                    }
                }
            }
        ''',
        'variables': {
            'username': f'{uname}',
        }
    }

    solved_data = {
        'query': '''
            query userProblemsSolved($username: String!) {
                matchedUser(username: $username) {
                    submitStatsGlobal {
                        acSubmissionNum {
                            difficulty
                            count
                        }
                    }
                }
            }
        ''',
        'variables': {
            'username': f'{uname}',
        }
    }

    ranking_response = requests.post(url, headers=headers, json=ranking_data)
    solved_response = requests.post(url, headers=headers, json=solved_data)

    ranking = json.loads(ranking_response.text)
    solved = json.loads(solved_response.text)

    res = {
        'uname': uname,
        'rank': ranking['data']['matchedUser']['profile']['ranking'],
        'solved': {
            'total': solved['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][0]['count'],
            'easy': solved['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][1]['count'],
            'medium': solved['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][2]['count'],
            'hard': solved['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][3]['count'],
        }
    }
    return res

if __name__ == "__main__":
    main()
