#! /bin/python3

# TODO:
    # improve speed
    # cache
    # dotfile
    # remove requests dep and move to urllib.request
    # add more fields
    # proper cli with easy way to add more unames

import requests
import json
import concurrent.futures

def main():
    COLORS: dict = {
        'CEND': '\33[0m',
        'CBOLD': '\33[1m',
        'CITALIC': '\33[3m',
        'CURL': '\33[4m',
        'CBLINK': '\33[5m',
        'CBLINK2': '\33[6m',
        'CSELECTED':'\33[7m',

        'CBLACK': '\33[30m',
        'CRED': '\33[31m',
        'CGREEN': '\33[32m',
        'CYELLOW':'\33[33m',
        'CBLUE': '\33[34m',
        'CVIOLET':'\33[35m',
        'CBEIGE': '\33[36m',
        'CWHITE': '\33[37m',

        'CBLACKBG': '\33[40m',
        'CREDBG': '\33[41m',
        'CGREENBG': '\33[42m',
        'CYELLOWBG':'\33[43m',
        'CBLUEBG': '\33[44m',
        'CVIOLETBG':'\33[45m',
        'CBEIGEBG': '\33[46m',
        'CWHITEBG': '\33[47m',

        'CGREY': '\33[90m',
        'CRED2': '\33[91m',
        'CGREEN2': '\33[92m',
        'CYELLOW2':'\33[93m',
        'CBLUE2': '\33[94m',
        'CVIOLET2':'\33[95m',
        'CBEIGE2': '\33[96m',
        'CWHITE2': '\33[97m',

        'CGREYBG': '\33[100m',
        'CREDBG2': '\33[101m',
        'CGREENBG2': '\33[102m',
        'CYELLOWBG2':'\33[103m',
        'CBLUEBG2': '\33[104m',
        'CVIOLETBG2':'\33[105m',
        'CBEIGEBG2': '\33[106m',
        'CWHITEBG2': '\33[107m',
    }
    UNAMES: tuple = (
        'nairvarun',
        'gultandon',
        'user5491H',
        'samsepi0x0',
        'suryanssshhh',
        'tkj2410',
        'chadasaisaketh',
        'shoryashokanda',
        'iamarpit602'
    )
    URL: str = 'https://leetcode.com/graphql/'
    results = []

    # https://docs.python.org/3/library/concurrent.futures.html
    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
        future_to_uname = {executor.submit(query, URL, uname): uname for uname in UNAMES}

        for future in concurrent.futures.as_completed(future_to_uname):
            uname = future_to_uname[future]
            try:
                data = future.result()
            except Exception as e:
                print(f'{uname} generated an exception: {e}')
            else:
                results.append(data)

    results = sorted(results, key=lambda x: x["rank"])
    for res in results:
        # todo: find cleaner way to print
        print(f'{COLORS["CBOLD"]}{res["uname"]}{COLORS["CEND"]} ({COLORS["CITALIC"]}{res["rank"]}{COLORS["CEND"]}) [{res["solved"]["total"]}: {COLORS["CGREEN"]}{res["solved"]["easy"]}{COLORS["CEND"]} + {COLORS["CYELLOW"]}{res["solved"]["medium"]}{COLORS["CEND"]} + {COLORS["CRED"]}{res["solved"]["hard"]}{COLORS["CEND"]}]')

def query(url: str, uname: str) -> dict:
    query_data: dict = {
        'query': '''
            query userPublicProfileAndProblemsSolved($username: String!) {
                matchedUser(username: $username) {
                    profile {
                        ranking
                    }
                    submitStatsGlobal {
                        acSubmissionNum {
                            difficulty
                            count
                        }
                    }
                }
            }
        ''',
        'variables': {
            'username': f'{uname}',
        }
    }

    query_res: dict = json.loads(requests.post(url, json=query_data).text)

    res: dict = {
        'uname': uname,
        'rank': query_res['data']['matchedUser']['profile']['ranking'],
        'solved': {
            'total': query_res['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][0]['count'],
            'easy': query_res['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][1]['count'],
            'medium': query_res['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][2]['count'],
            'hard': query_res['data']['matchedUser']['submitStatsGlobal']['acSubmissionNum'][3]['count'],
        }
    }

    return res

if __name__ == "__main__":
    main()
